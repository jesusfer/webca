# Generated by Django 2.0.4 on 2018-05-26 10:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import webca.web.fields
import webca.web.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CAUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='One-time login code', max_length=40)),
                ('keys', models.TextField(blank=True, help_text='Public keys')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ca_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User profile',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x509', models.TextField(help_text='PEM of the signed certificate', validators=[webca.web.validators.valid_pem_cer])),
                ('serial', models.CharField(db_index=True, help_text='Serial number of the certificate as an hex string', max_length=100)),
                ('subject', models.CharField(help_text='Subject of this certificate', max_length=255)),
                ('valid_from', models.DateTimeField(help_text='The certificate is valid from this date')),
                ('valid_to', models.DateTimeField(help_text='The certificate is valid until this date')),
            ],
            options={
                'verbose_name': 'Issued certificate',
            },
        ),
        migrations.CreateModel(
            name='CRLLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL for this location')),
                ('deleted', models.BooleanField(default=False, help_text='Has this URL been deleted?')),
                ('certificates', models.ManyToManyField(help_text='Certificates using this location', to='web.Certificate')),
            ],
            options={
                'verbose_name': 'CRL Location',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(help_text='Subject of this certificate request', max_length=255)),
                ('csr', models.TextField(help_text='CSR for this request in PEM format', validators=[webca.web.validators.valid_pem_csr])),
                ('status', models.SmallIntegerField(choices=[(1, 'Processing'), (2, 'Issued'), (3, 'Rejected'), (4, 'Error')], default=1, help_text='Status of this request')),
                ('reject_reason', models.CharField(blank=True, help_text='Why this request has been rejected', max_length=250)),
                ('approved', models.NullBooleanField(default=None, help_text='Has this request been (auto)approved?')),
                ('san', models.TextField(blank=True, help_text='Alternative Names requested', verbose_name='SAN names')),
                ('admin_comment', models.TextField(blank=True, help_text='Internal messages about this request')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Revoked',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='When the certificate was revoked')),
                ('reason', models.SmallIntegerField(choices=[(1, 'unspecified'), (2, 'keyCompromise'), (3, 'CACompromise'), (4, 'affiliationChanged'), (5, 'superseded'), (6, 'cessationOfOperation'), (7, 'certificateHold')], default=1)),
                ('certificate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='web.Certificate')),
            ],
            options={
                'verbose_name': 'Revoked certificate',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this certificate template', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of the certificate that will be displayed to the users so that they understand the purpose of this template.')),
                ('days', models.PositiveSmallIntegerField(help_text='Number of days that this certificate will be valid for', validators=[webca.web.validators.max_days])),
                ('enabled', models.BooleanField(help_text='Whether this template will be available for end users')),
                ('version', models.IntegerField(default=1, help_text='Version of this template')),
                ('auto_sign', models.BooleanField(default=True, help_text='Certificate requests using this template will automatically be signed by the CA')),
                ('min_bits_rsa', models.PositiveSmallIntegerField(default=2048, help_text='Minimum RSA key size', validators=[webca.web.validators.valid_key_size_number], verbose_name='RSA Key size')),
                ('min_bits_dsa', models.PositiveSmallIntegerField(default=1024, help_text='Minimum DSA key size', validators=[webca.web.validators.valid_key_size_number], verbose_name='DSA Key size')),
                ('min_bits_ec', models.PositiveSmallIntegerField(default=256, help_text='Minimum Elliptic Curves (EC) key size', validators=[webca.web.validators.valid_key_size_number], verbose_name='EC Key size')),
                ('required_subject', models.SmallIntegerField(choices=[(2, 'Common Name'), (3, 'User (CN + E-Mail)'), (1, 'Full Distinguished Name'), (4, 'Partial Distinguished Name')], default=2, help_text='Type of subject required (which fields are required in requests):<br/>\n        - CN: Common Name.<br/>\n        - User: CN + email. The email will be added as rfc822Name in the SubjectAltName extension.<br/>\n        - Full DN: All fields of the DN are required (C, ST, L, O, OU).<br/>\n        - Partial DN: CN is required, the rest are optional.')),
                ('san_type', models.SmallIntegerField(choices=[(1, 'Hidden'), (2, 'Shown')], default=1, help_text='Show the Subject Alternative Name field', verbose_name='Show SAN')),
                ('allowed_san', webca.web.fields.SubjectAltNameField(choices=[('None', 'None'), ('DNS', 'DNS'), ('IP', 'IP'), ('URI', 'URI'), ('email', 'E-Mail'), ('UTF8', 'UTF8 String')], default='None', help_text='Allowed SAN keywords. Any number of keywords is allowed.', max_length=250, verbose_name='Allowed SAN')),
                ('basic_constraints', models.PositiveSmallIntegerField(choices=[(1, 'Certification Authority'), (2, 'End Entity')], default=2, help_text='Type of certificate')),
                ('pathlen', models.SmallIntegerField(default=-1, help_text="Max path validation length. Only makes sense if Basic Constraints is CA.\n        If value is -1, it won't be included in the certfiicate.", validators=[webca.web.validators.valid_pathlen])),
                ('key_usage', webca.web.fields.KeyUsageField(choices=[('digitalSignature', 'digitalSignature'), ('nonRepudiation', 'nonRepudiation'), ('keyEncipherment', 'keyEncipherment'), ('dataEncipherment', 'dataEncipherment'), ('keyAgreement', 'keyAgreement'), ('keyCertSign', 'keyCertSign'), ('cRLSign', 'cRLSign'), ('encipherOnly', 'encipherOnly'), ('decipherOnly', 'decipherOnly')], default='digitalSignature', help_text='This list defines the allowed algorithms used by the public key of the certificates.', max_length=250, verbose_name='KeyUsage')),
                ('ext_key_usage_critical', models.BooleanField(default=False, verbose_name='Make the ExtendendedKeyUsage extension critical')),
                ('ext_key_usage', webca.web.fields.ExtendedKeyUsageField(blank=True, choices=[('serverAuth', 'serverAuth'), ('clientAuth', 'clientAuth'), ('codeSigning', 'codeSigning'), ('emailProtection', 'emailProtection'), ('timeStamping', 'timeStamping'), ('OCSPSigning', 'OCSPSigning'), ('ipsecIKE', 'ipsecIKE'), ('msCodeInd', 'msCodeInd'), ('msCodeCom', 'msCodeCom'), ('msCTLSign', 'msCTLSign'), ('msEFS', 'msEFS')], max_length=250, null=True, verbose_name='ExtendedKeyUsage')),
                ('crl_points', models.TextField(blank=True, help_text='Inherited from the signing certificate/system configuration', verbose_name='CRL Distribution Points')),
                ('aia', models.TextField(blank=True, help_text='Inherited from the signing certificate/system configuration', verbose_name='Authority Info Access')),
                ('extensions', models.TextField(blank=True, help_text='Other extensions for this certificate')),
                ('allowed_groups', models.ManyToManyField(blank=True, help_text='User groups allowed to use this Template', to='auth.Group')),
            ],
        ),
        migrations.AddField(
            model_name='request',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='web.Template'),
        ),
        migrations.AddField(
            model_name='request',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='certificate',
            name='csr',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='web.Request'),
        ),
        migrations.AddField(
            model_name='certificate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
    ]
